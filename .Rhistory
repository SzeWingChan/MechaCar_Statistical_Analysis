plt + geom_boxplot()
#15.3.5 Create Advanced Boxplots
#Build a boxplot
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
#Build multiple boxplots in a single figure
plt <- ggplot(mpg, aes(x=manufacturer, y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill = "white", colour = "green") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill = "white", colour = "darkgreen") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill = "white", colour = "darkgreen") + theme(axis.text.x=element_text(angle=45,hjust=1)) + labs(x = "Manufactuer") #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(fill = "white", colour = "darkgreen") + theme(axis.text.x=element_text(angle=45,hjust=1)) + labs(x = "Manufactuer", y="Highway Fuel Efficiency") #add boxplot and rotate x-axis labels 45 degrees
#15.3.6 Create Heatmap Plots
#Visualize the average highway fuel efficiency across the type of vehicle class from 1999 to 2008
mpg_summary <- mpg_table %% groupby(class, year) %% summarize(Mean_Hwy=mean(hwy), .groups='keep')
source("~/Data Analytics Bootcamp 2022/Module 15_Statistics and R/R_Analysis/01_Demo/1.R", echo=TRUE)
#15.3.6 Create Heatmap Plots
#Visualize the average highway fuel efficiency across the type of vehicle class from 1999 to 2008
mpg_summary <- mpg_table %% group_by(class, year) %% summarize(Mean_Hwy=mean(hwy), .groups='keep')
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=class, y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class", y="Vehicle Year", fill="Mean Highway (MPG)")
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
#15.3.7 Add Layers to Plots
#Recreate our previous boxplot example comparing the highway fuel efficiency across manufacturers
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
#Mapping argument functions
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
#Layer the upper and lower standard deviation boundaries to our visualization
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
View(mpg_long)
#Visualize the different vehicle fuel efficiency ratings by manufacturer
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Rating, color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
#Visualize the different vehicle fuel efficiency ratings by manufacturer
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
?facet_wrap()
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
#Skill Drill
plt <- ggplot(mpg_long,aes(x=manufacturer,y=cyl,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#Skill Drill
mpg_summary <- mpg_long %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep')
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
r
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=cyl,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#Skill Drill
mpg_summary <- mpg_long %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Mean_Engine,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_summary <- mpg_long %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#Skill Drill
mpg_summary <- mpg_long %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine,color=MPG_Type)) #import dataset into ggplot2
plt + geom_point() + theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_summary <- mpg_long %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine,color=class)) #import dataset into ggplot2
plt + geom_point() + theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxlot() + theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_summary <- mpg_long %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine,color=class)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#Skill Drill
plt <- ggplot(mpg_long,aes(x=class,y=displ,color=class)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
plt <- ggplot(mpg_long,aes(x=class,y=displ)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#Skill Drill
plt <- ggplot(mpg_long,aes(x=manufactuer,y=displ)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#Skill Drill
plt <- ggplot(mpg_long,aes(x=manufacturer,y=displ)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_boxplot() + facet_wrap(vars(drv)) + theme(axis.text.x=element_text(angle=45,hjust=1))
#15.6.3 Two-Sample t-Test
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#Example using 'used_car_data.csv'
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
#Example using 'used_car_data.csv'
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
setwd("~/Data Analytics Bootcamp 2022/Module 15_Statistics and R/R_Analysis")
lib
library(tidyverse)
#Example using 'used_car_data.csv'
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
#Example using 'used_car_data.csv'
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
setwd("~/Data Analytics Bootcamp 2022/Module 15_Statistics and R/R_Analysis/01_Demo")
#Example using 'used_car_data.csv'
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
#Select 50 random samples from the dataset
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
#15.6.3 Two-Sample t-Test
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
#15.6.2 One-Sample t-Test
?t.test()
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
View(mpg_1999)
View(mpg_2008)
t.test(mpg_1999$hwy, mpg_2008$hwy, paired = TRUE)
t.test(mpg_1999$hwy, mpg_2008$hwy, paired = T)
#15.6.5 ANOVA Test3
?aov()
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
View(mtcars_filt)
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
#15.7.1 The Correlation Conundrum
?cor()
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geon_points()
plt + geom_points()
plt + geom_point()
cor(mtr$hp, mtr$qsec)
cor(mtcars$hp, mtcars$qsec)
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_Price))
plt + geom_point()
cor(used_cars$Miles_Driven, used_cars$Selling_Price)
#Correlation Matrix
#First we need to select our numeric columns from our data frame and convert to a matrix
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
View(used_matrix)
cor(used_matrix)
#15.7.2 Linear Regression
?lm()
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec ~ hp,mtcars))
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
#Plot the linear model over scatter plot
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
#Multiple Linear Regression
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
pairs(mtcars)
head(mtcars)
#15.8.1 Chi-square Test
?chisq.test()
table(mpg$class,mpg$year) #generate contingency table
#Chi-square Test
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("~/Class/MechaCar_Statistical_Analysis")
library(dplyr)
setwd("~/Class/MechaCar_Statistical_Analysis")
MechaCar_Table <-  read.csv(file='Rources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
MechaCar_Table <-  read.csv(file='Resources/MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
View(MechaCar_Table)
#
?lm()
#
lm(vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, data=MechaCar_Table)
#
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_Table)
#Determine the p-value and the r-squared value
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_Table))
#Perform multiple linear regression
fit <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_Table)
summary(fit)
avPlots(fit)
library(car)
avPlots(fit)
library(tidyverse)
avPlots(fit)
ggPredict(fit, interactive = TRUE)
library(tidyverse)
ggPredict(fit, interactive = TRUE)
ggPredict(fit, interactive = TRUE)
install.packages(car)
#Determine the p-value and the r-squared value
summary(fit)
#Deliverable 2: Create Visualizations for the Trip Analysis
SC_Table <-  read.csv(file='Resources/Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
View(SC_Table)
total_summary <- summary(SC_Table)
total_summary <- SC_Table %>% summarize(Mean=mean(PSI))
View(total_summary)
?sd()
total_summary <- SC_Table %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=variance(PSI), SD=sd(PSI))
?variance
?var
total_summary <- SC_Table %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
??variance
total_summary <- SC_Table %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
View(total_summary)
#Creates a lot_summary dataframe using the group_by() and the summarize() functions
lot_summary <- SC_Table %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
View(lot_summary)
SC_Table
plot(SC_Table[, 3]
plot(SC_Table[, 3])
)
)
)
plot(SC_Table[, 3])
SC_Table[, 2]
head(SC_Table)
plot(SC_Table[1, 3])
SC_Table[1, 2]
SC_Table[1, 3]
SC_Table[1:10, 3]
plot(SC_Table[, 3])
SC_Table[, 2]
SC_lot1 <- SC_Table[SC_Table[, 2] == "Lot1", 3]
SC_lot1
SC_lot1 <- SC_Table[SC_Table[, 2] == "Lot1", 3]
SC_lot2 <- SC_Table[SC_Table[, 2] == "Lot2", 3]
SC_lot3 <- SC_Table[SC_Table[, 2] == "Lot3", 3]
plot(SC_lot1)
plot(SC_lot2)
plot(SC_lot3)
plot(SC_Table[, 3], col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50)))
plot(SC_lot3)
plot(SC_Table[, 3], col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50)))
plot(SC_Table[, 3], col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50) + labs(x="Vehicle", y="PSI"))
plot(SC_Table[, 3], col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50) + labs(x="Vehicle", y="PSI"))
plot(SC_Table[, 3], col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50))+ labs(x="Vehicle", y="PSI")
plot(SC_Table[, 3], main= "PSI of Suspension Coils", col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50)))
plot(SC_Table[, 3], main= "PSI of Suspension Coils", col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50)))
plot(SC_Table[, 3], main="PSI of Suspension Coils", xlab="Vehicle", col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50)))
plot(SC_Table[, 3], main="PSI of Suspension Coils", xlab="Vehicle", ylab="PSI", col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50)))
plot(SC_Table[, 3], main="PSI of Suspension Coils", xlab="Vehicle", ylab="PSI",
legend("topleft", c("Lot 1","Lot 2", "Lot 3")),
col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50)))
plot(SC_Table[, 3], main="PSI of Suspension Coils", xlab="Vehicle", ylab="PSI",
col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50)),
legend("topleft", c("Lot 1","Lot 2", "Lot 3")),
fill=c("red", "blue", "purle"))
plot(SC_Table[, 3], main="PSI of Suspension Coils", xlab="Vehicle", ylab="PSI",
col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50)),
legend("topleft", c("Lot 1","Lot 2", "Lot 3")),
fill=c("red", "blue", "purle"))
plot(SC_Table[, 3], main="PSI of Suspension Coils", xlab="Vehicle", ylab="PSI",
col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50)),
legend("topleft", c("Lot 1","Lot 2", "Lot 3")))
plot(SC_Table[, 3], main="PSI of Suspension Coils", xlab="Vehicle", ylab="PSI",
col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50))
plot(SC_Table[, 3], main="PSI of Suspension Coils", xlab="Vehicle", ylab="PSI",
col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50)),
legend("topleft", c("Lot 1","Lot 2", "Lot 3")))
plot(SC_Table[, 3], main="PSI of Suspension Coils", xlab="Vehicle", ylab="PSI", col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50))
plot(SC_Table[, 3],
main="PSI of Suspension Coils",
xlab="Vehicle",
ylab="PSI",
col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50)))
plot(SC_Table[, 3],
main="PSI of Suspension Coils",
xlab="Vehicle",
ylab="PSI",
col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50))
lot(SC_Table[, 3],
main="PSI of Suspension Coils",
xlab="Vehicle",
ylab="PSI",
legend("topleft", c("Lot 1","Lot 2", "Lot 3"),
col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50))
)
plot(SC_Table[, 3],
main="PSI of Suspension Coils",
xlab="Vehicle",
ylab="PSI",
col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50))
plot(SC_Table[, 3],  main="PSI of Suspension Coils",
xlab="Vehicle", ylab="PSI",
col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50)))
plot(SC_Table[, 3],  main="PSI of Suspension Coils",
xlab="Vehicle", ylab="PSI",
col = c(rep("red", 50), rep("blue", "50"), rep("purple", 50)))
legend("topleft", c("Lot 1","Lot 2", "Lot 3"))
legend("topleft", c("Lot 1","Lot 2", "Lot 3"), fill=c("red", "blue", "purple"))
#Deliverable 3: T-Tests on Suspension Coils
>??t.test
#Deliverable 3: T-Tests on Suspension Coils
??t.test
#Deliverable 3: T-Tests on Suspension Coils
?t.test()
lot1 <- SC_Table %>% filter(Manufacturing_Lot==Lot1)
lot2 <- SC_Table %>% filter(Manufacturing_Lot==Lot2)
lot3 <- SC_Table %>% filter(Manufacturing_Lot==Lot3)
#Deliverable 3: T-Tests on Suspension Coils
lot1 <- SC_Table %>% filter(Manufacturing_Lot=="Lot1")
View(lot1)
lot1 <- SC_Table %>% filter(Manufacturing_Lot=="Lot1")
lot2 <- SC_Table %>% filter(Manufacturing_Lot=="Lot2")
lot3 <- SC_Table %>% filter(Manufacturing_Lot=="Lot3"")
lot3 <- SC_Table %>% filter(Manufacturing_Lot=="Lot3")
lot1 <- SC_Table %>% filter(Manufacturing_Lot=="Lot1")
lot2 <- SC_Table %>% filter(Manufacturing_Lot=="Lot2")
lot3 <- SC_Table %>% filter(Manufacturing_Lot=="Lot3")
View(lot1)
View(lot2)
View(lot3)
t.test(lot1$PSI, lot2$PSI, lot3$PSI, paired = T)
t.test(SC_Table[, 3], paired = FALSE)
t.test(SC_Table[, 3] - 1500, paired = FALSE)
#Deliverable 3: T-Tests on Suspension Coils
t.test(SC_Table$PSI, mu=1500)
lot1 <-  subset(SC_Table, Manufacturing_Lot == "Lot1")
View(lot1)
View(lot1)
View(lot1)
View(lot1)
lot1 <-  subset(SC_Table, PSI, Manufacturing_Lot == "Lot1")
t.test(lot1$PSI, mu=1500)
#Deliverable 3: T-Tests on Suspension Coils
#Use t.test() to determine if the PSI across all manufacturing lots is statistically different from the population mean of 1,500 pounds per square inch
t.test(SC_Table$PSI, mu=1500)
lot1 <-  subset(SC_Table, Manufacturing_Lot == "Lot1")
t.test(lot1$PSI, mu=1500)
lot2 <-  subset(SC_Table, Manufacturing_Lot == "Lot2")
t.test(lot2$PSI, mu=1500)
lot3 <-  subset(SC_Table, Manufacturing_Lot == "Lot3")
t.test(lot3$PSI, mu=1500)
lot1 <-  subset(SC_Table, Manufacturing_Lot == "Lot1")
lot1
lot1$PSI
t.test(lot1$PSI, mu=1500)
lot1$PSI
t.test(lot1$PSI, mu=1500)
set.seed(1234)
population <- rnorm(10000, mean = 155, sd = 10)
sample(population, size = sample_size, replace = FALSE)
set.seed(1234)
n_pop <- 10000
population <- rnorm(n_pop, mean = 155, sd = 10)
sample_size <- 200
sample(population, size = sample_size, replace = FALSE)
sample(population, size = sample_size, replace = FALSE)
sample(population, size = sample_size, replace = FALSE)
sample(population, size = sample_size, replace = FALSE)
sample(population, size = sample_size, replace = FALSE)
sample(population, size = sample_size, replace = FALSE)
sample(population, size = sample_size, replace = FALSE)
sample(population, size = sample_size, replace = FALSE)
set.seed(1234)
n_pop <- 10000
population <- rnorm(n_pop, mean = 155, sd = 10)
population <- rnorm(n_pop, mean = 155, sd = 10)
population
plot(population)
sample_size <- 200
X <- sample(population, size = sample_size, replace = FALSE)
X
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
t.test(X, mu = 160)
my_test <- t.test(X, mu = 160)
my_test
sample_size <- 20
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
sample_size <- 20
X <- sample(population, size = sample_size, replace = FALSE)
mean(X)
# H0: pop mean = 160, H1: pop mean != 160
my_test <- t.test(X, mu = 160)
my_test
mean(X)
View(SC_Table)
View(MechaCar_Table)
